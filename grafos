//υλοποιηση κομβου
typedef struct Adj_list_node {
  int dest;
  struct Adj_list_node* next;
} Adj_list_node;


//υλοποιηση λιστας γειτνιασης
typedef struct Adj_list {
  Adj_list_node *head;
} Adj_list;


//υλοποιηση γραφου
typedef struct Graph {
  int V;
  AdjList* array;
} Graph;


//δημιουργια γραφου
Graph* create_graph(int V) {
  Graph* graph = (Graph*) malloc(sizeof(Graph));
  graph->V = V;
  graph->array = (Adj_list*) malloc(V *
  sizeof(Adj_list));
  int i;
  for (i = 0; i < V; ++i)
    graph->array[i].head = NULL;
  return graph;
}


//δημιουργια κομβου
Adj_list_node* new_adj_list_node(int dest) {
  Adj_list_node* new_node =
  (Adj_list_node*) malloc(sizeof(Adj_list_node));
  new_node->dest = dest;
  new_node->next = NULL;
  return new_node;
}


//προσθηκη ακμης
void add_edge(Graph* graph, int src, int dest) {
  Adj_list_node* new_node = new_adj_list_node(dest);
  new_node->next = graph->array[src].head;
  graph->array[src].head = new_node;
  new_node = new_adj_list_node(src);
  new_node->next = graph->array[dest].head;
  graph->array[dest].head = new_node;
}


//εκτυπωση καταλογων γειτνιασης
void print_graph(Graph* graph) {
  int v;
  for (v = 0; v < graph->V; ++v) {
    Adj_list_node* aln = graph->array[v].head;
    printf("\n Adjacency list of vertex %d\n head ", v);
    while (aln) {
      printf("-> %d", aln->dest);
      aln = aln->next;
    }
    printf("\n");
  }
}


//παραδειγμα main
int main() {
  int V = 5;
  struct Graph* graph = create_graph(V);
  add_edge(graph, 0, 1);
  add_edge(graph, 0, 4);
  add_edge(graph, 1, 2);
  add_edge(graph, 1, 3);
  add_edge(graph, 1, 4);
  add_edge(graph, 2, 3);
  add_edge(graph, 3, 4);
  print_graph(graph);
  return 0;
}
