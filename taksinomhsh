//bubble sort
void bubble_sort(int arr[], int n) {
  int i, j;
  for (i = 0; i < n-1; i++)
    for (j = 0; <n-i-1; j++)
      if (arr[j] > arr[j+1])
        swap(&arr[j], &arr[j+1]);
}


//η βοηθητικη συναρτηση swap
void swap(int *x, int *y) {
  int temp = *x;
  *x = *y;
  *y = temp;
}


//η βοηθητικη συναρτηση print_array
void print_array(int arr[], int size) {
  int i;
  for (i=0; i < size; i++)
    printf("%d ", arr[i]);
  printf("\n");
}


//bubble sort συναρτηση main
int main() {
  int arr[] = {64, 34, 25, 12, 22, 11, 90};
  int n = sizeof(arr)/sizeof(arr[0]);
  print_array(arr, n);
  bubble_sort(arr, n);
  print_array(arr, n);
  return 0;
}


//merge
void merge(int A[], int p, int q, int r) {
  int i, j, k;
  int n1 = q - p + 1, n2 = r - q;
  int L[n1+1], R[n2+1];
  for (i = 0; i < n1; i++)
    L[i] = A[p + i];
  for (j = 0; j < n2; j++)
    R[j] = A[q + 1+ j];
  L[n1] = INT_MAX;
  R[n2] = INT_MAX;
  i = j = 0;
  for (k = p; k <= r; k++) {
    if (L[i] <= R[j]) {
      A[k] = L[i];
      i = i + 1;
    }
    else {
      A[k] = R[j];
    j = j + 1;
    }
  }
}


//mergesort
void merge_sort(int A[], int p, int r) {
  if (p < r) {
    int q = (p+r)/2;
    merge_sort(A, p, q);
    merge_sort(A, q+1, r);
    merge(A, p, q, r);
  }
}


//merge sort συναρτηση main
int main() {
  int arr[] = {5, 2, 4, 7, 1, 3, 2, 6};
  int arr_length = sizeof(arr)/sizeof(arr[0]);
  print_array(arr, arr_length);
  merge_sort(arr, 0, arr_length - 1);
  print_array(arr, arr_length);
  return 0;
}


//quicksort
void quicksort(int A[], int p, int r) {
  int q;
  if (p<r) {
    q = partition(A, p, r);
    quicksort(A, p, q-1);
    quicksort(A, q+1, r);
  }
}


//βοηθητικη συναρτηση partition
int partition(int A[], int p, int r) {
  int x = A[r];
  int i = p - 1;
  int j;
  for(j=p; j<=r-1; j++) {
    if (A[j] <= x) {
      i = i+1;
      exchange(A, i, j);
    }
  }
  exchange(A, i+1, r);
  return i+1;
}


//quicksort συναρτηση main
int main(void) {
  int arr[] = {2, 8, 7, 1, 3, 5, 6, 4};
  int arr_size = sizeof(arr)/sizeof(arr[0]);
  print_array(arr, arr_size);
  quicksort(arr, 0, arr_size-1);
  print_array(arr, arr_size);
  return 0;
}


//counting sort
void counting_sort(int a[], int b[], int n) {
  int c[K+1], i, j;
  for (i=0; i<=K; i++)
    c[i] = 0;
  for (j=0; j<n; j++)
    c[a[j]] = c[a[j]] + 1;
  for (i=1; i<=K; i++)
    c[i] = c[i] + c[i-1];
  for (j=n-1; j>=0; j--) {
    b[c[a[j]]-1] = a[j];
    c[a[j]] = c[a[j]]-1;
  }
}


//counting sort συναρτηση main
int main() {
  int arr[] = {1, 2, 1, 2, 3, 1, 4, 1, 0};
  int arr_size = sizeof(arr)/sizeof(arr[0]);
  int result[arr_size];
  print_array(arr, arr_size);
  counting_sort(arr, result, arr_size);
  print_array(result, arr_size);
  return 0;
}
