//max-heapify
void max_heapify(int A[], int i, int n) {
  int l = left(i);
  int r = right(i);
  int largest;
  if ((l <= n-1) && (A[l] > A[i]))
    largest = l;
  else largest = i;
  if ((r <= n-1) && (A[r] > A[largest]))
    largest = r;
  if (largest != i) {
    exchange(A, i, largest);
    max_heapify(A, largest, n);
  }
}


//exchange
void exchange(int A[], int n, int m) {
  int temp;
  temp = A[n];
  A[n] = A[m];
  A[m] = temp;
}


//build_max_heap
void build_max_heap(int A[], int n) {
  int i;
  for(i=(n/2)-1; i>=0; i--)
    max_heapify(A, i, n);
}


//heap_sort
void heap_sort(int A[], int n) {
  build_max_heap(A, n);
  int i;
  for(i = n-1; i>=1; i--) {
    exchange(A, 0, i);
    max_heapify(A, 0, i-1);
  }
}

//παραδειγμα main
int main(void) {
  int arr[] = {16, 4, 10, 14, 7, 9, 3, 2, 8, 1};
  int arr_size = sizeof(arr)/sizeof(arr[0]);
  print_array(arr, arr_size);
  heapsort(arr, arr_size);
  print_array(arr, arr_size);
  return 0;
}


//heap_maximum
int heap_maximum(int A[]) {
  return A[0];
}


//heap_extract_max
int heap_extract_max(int A[], int *n) {
  if (*n < 1)
    printf("Error! Heap Underflow!");
  int max = A[0];
  A[0] = A[*n - 1];
  *n = *n - 1;
  max_heapify(A, 0, *n);
  return max;
}


//heap_increase_key
void heap_increase_key(int A[], int i, int key) {
  if (key < A[i])
    printf("Error! New key is smaller than current key!");
  A[i] = key;
  while((i > 0) && (A[parent(i)]<A[i])) {
    exchange(A, i, parent(i));
    i = parent(i);
  }
}

//max_heap_insert
void max_heap_insert(int A[], int* n, int key) {
  A[*n] = -INT_MAX;
  *n = *n+1;
  int temp = *n - 1;
  heap_increase_key(A, temp, key);
}

//παραδειγμα main
int main(void) {
int arr[MAX_SIZE];
int heap_size = 0;
max_heap_insert(arr, &heap_size, 32);
print_array(arr, heap_size);
printf("heap maximum=%d\n", heap_maximum(arr));
printf("extracted max=%d\n", heap_extract_max(arr,
&heap_size));
print_array(arr, heap_size);
return 0;
}
