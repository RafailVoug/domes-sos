#define SIZE 10

//struct κυκλικης ουρας
typedef struct {
  int rear;
  int front;
  int arr[SIZE];
} cqueue;

//αρχικοποιηση
void init_queue(cqueue *cq) {
  cq->front = cq->rear = -1;
}

//ελεγχος αν ειναι αδεια
int queue_is_empty(cqueue *cq) {
  if(cq->front == -1)
    return 1;
  return 0;
}

//ελεγχος αν ειναι γεματη
int queue_is_full(cqueue *cq) {
  if((cq->front == 0 && cq->rear == SIZE-1) || (cq->rear == (cq->front)-1))
    return 1;
  return 0;
}

//εισαγωγη (4 περιπτωσεις)
int enqueue(cqueue *cq, int val) {
  if (queue_is_full(cq))   //1η (γεματη)
    return -1;
  else if (queue_is_empty(cq)) {   //2η (αδεια)
    cq->front = cq->rear = 0;
    cq->arr[cq->rear] = val;
  return 1;
  }
  else if (cq->rear == SIZE-1 && cq->front != 0) {   //3η (εχει φτασει στο τελος αλλα υπαρχει χωρος στην αρχη)
    cq->rear = 0;
    cq->arr[cq->rear] = val;
    return 1;
  }
  else {   //4η (οπως στην κανονικη ουρα)
    (cq->rear)++;
    cq->arr[cq->rear] = val;
    return 1;
  }
}

//εξαγωγη
int dequeue(cqueue *cq) {
  if (queue_is_empty(cq))
    return -1;   //1η (αδεια)
  int data = cq->arr[cq->front];   //βοηθητικη μεταβλητη data που επιστρεφει την τιμη που αφαιρειται
  if (cq->front == cq->rear) {   //2η (μοναδικο στοιχειο)
    cq->front = -1;
    cq->rear = -1;
  }
  else if(cq->front == SIZE-1)   //3η (πρωτο στοιχειο στην τελευταια θεση)
    cq->front = 0;
  else   //4η (ιδια με την απλη ουρα)
    (cq->front)++;
  return data;   //σε καθε αλλη περιπτωση επιστρεφει την τιμη data
}

//εμφανιση πρωτου στοιχειου
int first(cqueue *cq) {
  if (queue_is_empty(cq))
    return -1;
  return cq->arr[cq->front];
}

//εμφανιση τελευταιου στοιχειου
int last(cqueue *cq) {
  if (queue_is_empty(cq))
    return -1;
  return cq->arr[cq->rear];
}

//μεγεθος ουρας
int size(cqueue *cq) {
  if (cq->rear >= cq->front)   //η ουρα δεν εχει διπλωσει
    return cq->rear - cq->front + 1;
  else   //η ουρα εχει διπλωσει
    return (SIZE-cq->front)+(cq->rear+1);
}

//εμφανιση κυκλικης ουρας
void print_queue(cqueue *cq) {
  int i;
  if(queue_is_empty(cq))
    printf("Queue is empty!\n");
  if (cq->rear >= cq->front) {   //η ουρα δεν εχει διπλωσει
    printf("Queue: ");
    for (i = cq->front; i <= cq->rear;i++)
      p rintf("%d\t",cq->arr[i]);
      printf("\n");
    }
  else {   //η ουρα εχει διπλωσει
    printf("Queue: ");
    for (i = cq->front; i < SIZE;i++)
      printf("%d\t", cq->arr[i]);
    for (i = 0; i <= cq-> rear; i++)
      printf("%d\t", cq->arr[i]);
    printf("\n");
    }
}

//παραδειγμα συναρτησης main
int main(void) {
  cque queue;
  init_queue(&queue);
  enqueue(&queue, 3);
  dequeue(&queue);
  print_queue(&queue);
  return 0;
}
