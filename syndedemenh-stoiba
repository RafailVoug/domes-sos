//struct συνδ. στοιβας
typedef struct Stack {
  int size;
  Node *top;
} Stack;

//αρχικοποιηση συνδ. στοιβας
void init_stack(Stack *s) {
  s->size=0;
  s->top=NULL;
}

//η συνδ. στοιβα ειναι αδεια (ΔΕΝ ΧΡΕΙΑΖΕΤΑΙ)
int stack_is_empty(Stack *s) {
  if (s->size == 0) return 1;
  else return 0;
}

//εισαγωγη
void push(Stack *s,int val) {
  Node *new_node = (Node*)malloc(sizeof(Node));
  new_node->key=val;
  new_node->next = s->top;
  s->top = new_node;
  s->size++;
}

//εξαγωγη
int pop(Stack *s) {
  int val;
  Node *tmp;
  if (!stack_is_empty()) {
    val = (s->top)->key;
    tmp = s->top;
    s->top = (s->top)->next;
    s->size--;
    free(tmp);
    return val;
  }
  else return -1;
}

//εμφανιση δεικτη top
int top(Stack *s) {
  if (stack_is_empty(s))
    return -1;
  else return (s->top)->key;
}

//μεγεθος συνδ. στοιβας
int size(Stack *s) {
  return s->size;
}

//εμφανιση συνδ. στοιβας
void print_stack(Stack *s) {
  if (stack_is_empty(s))
    printf("Stack is empty!\n");
  else {
    Node *t = s->top;
    printf("Stack:\n");
    while(t!=NULL) {
      printf("%d\n", t->key);
      t=t->next;
    }
  printf("\n");
  }
}

//παραδειγμα συναρτησης main
int main(void) {
  stack s;
  init_stack(&s);
  push(&s, 3);
  pop(&s);
  printf("\d", top(&s));
  print_stack(&s);
  return 0;
}
