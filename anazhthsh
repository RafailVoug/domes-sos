//δυαδικη αναζητηση
int binary_search(int arr[], int l, int r, int x) {
if (r >= l) {
int mid = l + (r - l)/2;
if (arr[mid] == x)
return mid;
if (arr[mid] > x)
return binary_search(arr, l, mid-1, x);
return binary_search(arr, mid+1, r, x);
}
return -1;
}


//δυαδικη παραδειγμα main 
int main(void) {
int arr[] = {3, 5, 7, 11, 12, 14, 15, 17, 21, 32,
35, 40};
int n = sizeof(arr)/ sizeof(arr[0]);
int x = 17;
int result = binary_search(arr, 0, n-1, x);
if (result == -1)
printf("Key is not present in array");
else
printf("Key is present at index %d", result);
return 0;
}


//επαναληπτικη δυαδικη αναζητηση
int iterative_binary_search_(int arr[], int l, int r,
int x){
while (l <= r) {
int m = l + (r-l)/2;
if (arr[m] == x)
return m;
if (arr[m] < x)
l = m + 1;
else r = m - 1;
}
return -1;
}


//αναζητηση παρεμβολης
int interpolation_search(int arr[], int n, int x) {
int lo = 0;
int hi = (n - 1);
while (lo <= hi && x >= arr[lo] && x <= arr[hi]) {
int pos = lo + (((double)(hi-lo) /
(arr[hi]-arr[lo]))*(x - arr[lo]));
if (arr[pos] == x)
return pos;
if (arr[pos] < x)
lo = pos + 1;
else hi = pos - 1;
}
return -1;
}


//παρεμβολη παραδειγμα main
int main() {
int arr[] =
{10,12,13,16,18,19,20,21,22,23,24,26,28,31,
33,34,36,38,39,40};
int n = sizeof(arr)/sizeof(arr[0]);
int x = 24;
int index = interpolation_search(arr, n, x);
if (index != -1)
printf("Element found at index %d", index);
else
printf("Element not found.");
return 0;
}


//εκθετικη αναζητηση
int exponential_search(int arr[], int n, int x) {
if (arr[0] == x)
return 0;
int i = 1;
while (i < n && arr[i] <= x)
i = i*2;
return binary_search(arr, i/2, min(i, n-1), x);
}

//εκθετικη παραδειγμα main
int main(void) {
int arr[] = {10,12,13,16,18,19,20,21,22,23,24,26,28,
31,33,34,36,38,39,40};
int n = sizeof(arr)/ sizeof(arr[0]);
int x = 28;
int result = exponential_search(arr, n, x);
if (index != -1)
printf("Element found at index %d", index);
else
printf ("Element not found.");
return 0;
}
