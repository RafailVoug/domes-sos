//δυαδικη αναζητηση
int binary_search(int arr[], int l, int r, int x) {
  if (r >= l) {
    int mid = l + (r - l)/2;
    if (arr[mid] == x)
      return mid;
    if (arr[mid] > x)
      return binary_search(arr, l, mid-1, x);
    return binary_search(arr, mid+1, r, x);
  }
  return -1;
}


//δυαδικη παραδειγμα main 
int main(void) {
  int arr[] = {3, 5, 7, 11, 12, 14, 15, 17, 21, 32, 35, 40};
  int n = sizeof(arr)/ sizeof(arr[0]);
  int x = 17;
  int result = binary_search(arr, 0, n-1, x);
  if (result == -1)
    printf("Key is not present in array");
  else
    printf("Key is present at index %d", result);
  return 0;
}


//επαναληπτικη δυαδικη αναζητηση
int iterative_binary_search_(int arr[], int l, int r, int x){
  while (l <= r) {
    int m = l + (r-l)/2;
    if (arr[m] == x)
      return m;
    if (arr[m] < x)
      l = m + 1;
    else r = m - 1;
  }
  return -1;
}


//αναζητηση παρεμβολης
int interpolation_search(int arr[], int n, int x) {
  int lo = 0;
  int hi = (n - 1);
  while (lo <= hi && x >= arr[lo] && x <= arr[hi]) {
    int pos = lo + (((double)(hi-lo) /
    (arr[hi]-arr[lo]))*(x - arr[lo]));
    if (arr[pos] == x)
      return pos;
    if (arr[pos] < x)
      lo = pos + 1;
    else hi = pos - 1;
  }
  return -1;
}


//παρεμβολη παραδειγμα main
int main() {
  int arr[] = {10,12,13,16,18,19,20,21,22,23,24,26,28,31,33,34,36,38,39,40};
  int n = sizeof(arr)/sizeof(arr[0]);
  int x = 24;
  int index = interpolation_search(arr, n, x);
  if (index != -1)
    printf("Element found at index %d", index);
  else
    printf("Element not found.");
  return 0;
}


//εκθετικη αναζητηση
int exponential_search(int arr[], int n, int x) {
  if (arr[0] == x)
    return 0;
  int i = 1;
  while (i < n && arr[i] <= x)
    i = i*2;
  return binary_search(arr, i/2, min(i, n-1), x);
}


//εκθετικη παραδειγμα main
int main(void) {
  int arr[] = {10,12,13,16,18,19,20,21,22,23,24,26,28,31,33,34,36,38,39,40};
  int n = sizeof(arr)/ sizeof(arr[0]);
  int x = 28;
  int result = exponential_search(arr, n, x);
  if (index != -1)
    printf("Element found at index %d", index);
  else
    printf ("Element not found.");
  return 0;
}




//ΠΙΝΑΚΕΣ ΔΙΑΣΠΟΡΑΣ




//υλοποιηση κομβου
typedef struct Node {
  struct Node* next;
  int key;
} Node;


//υλοποιηση αλυσιδας
typedef struct Single_chain {
  Node* first;
  Node* last;
  int size;
} Single_chain;


//αρχικοποιηση αλυσιδας
void init_chain(Single_chain* sc) {
  sc->first = NULL;
  sc->last = NULL;
  sc->size = 0;
}


//δομη κατακερματισμου
typedef struct Chained_hashing {
  Single_chain* table;
} Chained_hashing;


//εισαγωγη
void insert_to_chain(Single_chain* sc, int key) {
  if(sc->size == 0) {
    sc->first = (Node*)malloc(sizeof(Node));
    (sc->first)->key = key;
    (sc->first)->next = NULL;
    sc->last = sc->first;
  }
  else {
    (sc->last)->next=(Node*)malloc(sizeof(Node));
    ((sc->last)->next)->key=key;
    ((sc->last)->next)->next=NULL;
    sc->last=(sc->last)->next;
  }
  sc->size++;
}


//εκτυπωση
void print_chain(Single_chain* sc) {
  Node* nd=sc->first;
  printf("List: ");
  while (nd != NULL) {
    printf("%d\t",nd->key);
    nd=nd->next;
  }
  printf("\n");
}


//αναζητηση κλειδιου
int search_chain(Single_chain* sc, int key) {
  Node * nd = sc->first;
  while (nd != NULL) {
    if(nd->key==key)
      return 1;
    nd=nd->next;
  }
  return -1;
}


//αναζητηση κομβου με δοθεν κλειδι
Node* search_chain_node(Single_chain* sc, int key) {
  Node* nd = sc->first;
  while (nd != NULL) {
    if(nd->key == key)
      return nd;
    nd = nd->next;
  }
  return NULL;
}


//αρχικοποιηση κατακερματισμου
void init_hashing(Chained_hashing* ch) {
  int i;
  ch->table=(Single_chain*)malloc(M*sizeof(Single_chain));
  for (i=0; i<M; i++)
    init_chain(&(ch->table[i]));
}


//εισαγωγη του κατακερματισμου
void insert_to_chained_hashing(Chained_hashing* ch, int key) {
  insert_to_chain(&(ch->table[key%M]), key);
}


//διαγραφη του κατακερματισμου
void delete_from_chained_hashing(Chained_hashing* ch, int key) {
  delete_from_chain(&(ch->table[key%M]), key);
}


//αναζητηση του κατακερματισμου
int search_in_chained_hashing(Chained_hashing* ch, int key) {
  return search_chain(&(ch->table[key%M]), key);
}


//αναζητηση του κατακερματισμου
void print_chained_hashing(Chained_hashing* ch) {
  int i;
  for(i=0; i<M; i++) {
    printf("Pos %d \n",i);
    print_chain(&(ch->table[i]));
    printf("---------\n");
  }
}


//υλοποιηση κατακερματισμου (πχ εισαγωγη 100 κλειδιων)
int main(void) {
  Chained_hashing ch;
  init_hashing(&ch);
  int i;
  for (i=0;i<100;i++)
    insert_to_chained_hashing(&ch, (int)rand()%100);
  print_chained_hashing(&ch);
  return 0;
}
